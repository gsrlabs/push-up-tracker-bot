package bot

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"sync"
	"time"
	ui "trackerbot/keyboard"
	"trackerbot/service"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type inputType int

const (
	perDayLimit inputType = iota
	inputTypeMaxReps
	inputTypeCustomNorm
)
const (
	oneTimeEntryLimit = 1000
	maxRepsLimit = 500
	castomDailyNormLimit = 500
)
type pendingInput struct {
	inputType   inputType
	messageID   int
	cancelMsgID int // ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
}

type BotHandler struct {
	bot           *tgbotapi.BotAPI
	service       *service.PushupService
	pendingInputs sync.Map
	adminIDs      map[int64]bool
}

func NewBotHandler(bot *tgbotapi.BotAPI, service *service.PushupService) *BotHandler {
	return &BotHandler{bot: bot, service: service, adminIDs: map[int64]bool{
		1036193976: true, // user_id
	}}
}

func (h *BotHandler) HandleUpdate(update tgbotapi.Update) {
	if update.CallbackQuery != nil {
		if update.CallbackQuery.Data == "cancel_input" {
			chatID := update.CallbackQuery.Message.Chat.ID
			h.clearPendingInput(chatID)

			// –û—Ç–≤–µ—Ç –Ω–∞ callback
			callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")
			h.bot.Request(callback)

			// –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
			editMsg := tgbotapi.NewEditMessageText(chatID, update.CallbackQuery.Message.MessageID, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")
			h.bot.Send(editMsg)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
			notificationsEnabled, _ := h.service.GetNotificationsStatus(context.Background(), update.CallbackQuery.From.ID)
			msg := tgbotapi.NewMessage(chatID, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")
			msg.ReplyMarkup = ui.MainKeyboard(notificationsEnabled)
			h.bot.Send(msg)

			return
		}
	}

	if update.Message == nil {
		return
	}

	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
	defer cancel()

	username := update.Message.From.UserName
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID
	text := strings.TrimSpace(update.Message.Text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞–µ–º—ã–π –≤–≤–æ–¥
	if input, ok := h.getPendingInput(chatID); ok {
		// –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —á–∏—Å–ª–æ
		if count, err := strconv.Atoi(text); err == nil {
			// –£—Å–ø–µ—Ö ‚Äî –æ—á–∏—â–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
			h.clearPendingInput(chatID)
			notificationsEnabled, err := h.service.GetNotificationsStatus(ctx, userID)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %v", err)
				notificationsEnabled = true

			}

			switch input.inputType {
			case perDayLimit:
				h.handleAddPushups(ctx, userID, username, chatID, count, notificationsEnabled)
			case inputTypeMaxReps:
				h.handleSetMaxReps(ctx, userID, username, chatID, count, notificationsEnabled)
			case inputTypeCustomNorm:
				h.handleSetCustomNorm(ctx, userID, chatID, count, notificationsEnabled)
			}
			return

		}
		h.clearPendingInput(chatID)
		// –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ —á–∏—Å–ª–æ ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ø–æ—á–∫—É reply
		replyMsg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
		replyMsg.ReplyMarkup = tgbotapi.ForceReply{
			ForceReply:            true,
			InputFieldPlaceholder: "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
			Selective:             true,
		}
		// reply –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∑–∞–ø—Ä–æ—Å–∞ (–º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –µ–≥–æ id –≤ pendingInput)

		msg, err := h.bot.Send(replyMsg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}

		h.sendCancelButton(chatID, input.inputType, msg.MessageID)
		return
	}

	// –ï—Å–ª–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–µ—Ç ‚Äî –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫/–∫–æ–º–∞–Ω–¥
	notificationsEnabled, err := h.service.GetNotificationsStatus(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %v", err)
		notificationsEnabled = true
	}

	// –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∏ maxReps
	if text == "/reset_norm" {
		if err := h.service.ResetMaxReps(ctx, userID); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ max_reps: %v", err)
			h.bot.Send(tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
			return
		}
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (40)")
		msg.ReplyMarkup = ui.MainKeyboard(notificationsEnabled)
		h.bot.Send(msg)
		return
	}

	if text == "/debug_cache" {
		if !h.adminIDs[userID] {
			h.bot.Send(tgbotapi.NewMessage(chatID, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã"))
			return
		}

		userCount := h.service.DebugCache().Size()
		dump := h.service.DebugCache().Dump()
		debugMassage := fmt.Sprintf("–û–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d \n%s", userCount, dump)
		msg := tgbotapi.NewMessage(chatID, debugMassage)
		h.bot.Send(msg)
		return
	}

	switch text {
	case "/start":
		h.handleStart(ctx, chatID, userID, username, notificationsEnabled)
	case "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è":
		h.requestPushupCount(chatID, perDayLimit)
	case "üéØ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ—Ä–º—É":
		h.requestMaxReps(chatID)
	case "üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ—Ä–º—É":
		h.requestCustomNorm(chatID)
	case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		h.handleTodayStat(ctx, userID, chatID, notificationsEnabled)
		h.handleTotalStat(ctx, userID, chatID, notificationsEnabled)
		h.handleTodayLeaderboard(ctx, chatID)
	case "üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
		h.handleToggleNotifications(ctx, userID, chatID, false)
	case "üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
		h.handleToggleNotifications(ctx, userID, chatID, true)
	case "üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		msg.ReplyMarkup = ui.SettingsKeyboard(notificationsEnabled)
		h.bot.Send(msg)
	case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
		msg := tgbotapi.NewMessage(chatID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
		msg.ReplyMarkup = ui.MainKeyboard(notificationsEnabled)
		h.bot.Send(msg)
	default:
		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '/')
		if strings.HasPrefix(text, "/") {
			msg := tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")
			msg.ReplyMarkup = ui.MainKeyboard(notificationsEnabled)
			h.bot.Send(msg)
		}
		// –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
	}
}

func (h *BotHandler) handleAddPushups(ctx context.Context, userID int64, username string, chatID int64, count int, notEnable bool) {
	if count <= 0 {
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
		msg.ReplyMarkup = tgbotapi.ForceReply{
			ForceReply:            true,
			InputFieldPlaceholder: "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
			Selective:             true,
		}
		sentMsg, err := h.bot.Send(msg)

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			return
		}

		h.sendCancelButton(chatID, perDayLimit, sentMsg.MessageID)
		return
	}

	if count > oneTimeEntryLimit {
        msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (1000 –æ—Ç–∂–∏–º–∞–Ω–∏–π)")
		msg.ReplyMarkup = ui.MainKeyboard(notEnable)
        h.bot.Send(msg)
        return
    }

	result, err := h.service.AddPushups(ctx, userID, username, count)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∂–∏–º–∞–Ω–∏–π: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start.")
		h.bot.Send(msg)
		return
	}

	log.Printf("Username%s UserID %d added %d pushups", username, userID, count)

	response := fmt.Sprintf("‚úÖ–î–æ–±–∞–≤–ª–µ–Ω–æ: %d –æ—Ç–∂–∏–º–∞–Ω–∏–π!\nüìà–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: %d/%d\n", count, result.TotalToday, result.DailyNorm)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã
	hasCompleted, firstCompleter := h.service.CheckNormCompletion(result.DailyNorm)
	
	if result.TotalToday >= result.DailyNorm {
		response += "\nüéØ –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É!\n"
	} else {
		if !hasCompleted {
			response += "\n‚ùå –ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –Ω–æ—Ä–º—É —Å–µ–≥–æ–¥–Ω—è.\n–ú–æ–∂–µ—Ç, —Ç—ã –±—É–¥–µ—à—å –ø–µ—Ä–≤—ã–º? üí™\n"
		} else {
			response += fmt.Sprintf("\nüéØ %s —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª –Ω–æ—Ä–º—É!\n–ê —Ç—ã –Ω–µ –æ—Ç—Å—Ç–∞–≤–∞–π, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è! üöÄ\n", firstCompleter)
		}
	}

	msg := tgbotapi.NewMessage(chatID, response)
	msg.ReplyMarkup = ui.MainKeyboard(notEnable)
	h.bot.Send(msg)
}

func (h *BotHandler) handleSetMaxReps(ctx context.Context, userID int64, username string, chatID int64, count int, notEnable bool) {
	if count <= 0 {
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
		msg.ReplyMarkup = tgbotapi.ForceReply{
			ForceReply:            true,
			InputFieldPlaceholder: "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
			Selective:             true,
		}
		sentMsg, err := h.bot.Send(msg)

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			return
		}

		h.sendCancelButton(chatID, inputTypeMaxReps, sentMsg.MessageID)
		return
	}

	if count > maxRepsLimit {
        msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ (500 –æ—Ç–∂–∏–º–∞–Ω–∏–π)")
		msg.ReplyMarkup = ui.MainKeyboard(notEnable)
        h.bot.Send(msg)
        return
    }

	err := h.service.SetMaxReps(ctx, userID, username, count) 
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ max_reps: %v", err)
	}

	delyNorm := service.CalculateDailyNorm(count)

	err = h.service.SetDailyNorm(ctx, userID, delyNorm)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –Ω–æ—Ä–º—ã: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start.")
		h.bot.Send(msg)
		return
	}

	response := fmt.Sprintf("üîî–¢–≤–æ—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: %d\n", delyNorm)

	log.Printf("Username%s UserID %d set %d dely_norm", username, userID, delyNorm)

	msg := tgbotapi.NewMessage(chatID, response)
	msg.ReplyMarkup = ui.MainKeyboard(notEnable)
	h.bot.Send(msg)
}

func (h *BotHandler) requestPushupCount(chatID int64, inputType inputType) {

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ForceReply
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π:")
	msg.ReplyMarkup = tgbotapi.ForceReply{
		ForceReply:            true,
		InputFieldPlaceholder: "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
		Selective:             true,
	}
	sentMsg, err := h.bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	h.sendCancelButton(chatID, inputType, sentMsg.MessageID)
}

func (h *BotHandler) requestMaxReps(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥:")
	msg.ReplyMarkup = tgbotapi.ForceReply{
		ForceReply:            true,
		InputFieldPlaceholder: "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
		Selective:             true,
	}
	sentMsg, err := h.bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	h.sendCancelButton(chatID, inputTypeMaxReps, sentMsg.MessageID)
}

func (h *BotHandler) requestCustomNorm(chatID int64) {
	// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –æ—Ç–∂–∏–º–∞–Ω–∏–π:")

	msg.ReplyMarkup = tgbotapi.ForceReply{
		ForceReply:            true,
		InputFieldPlaceholder: "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
		Selective:             true,
	}
	sentMsg, err := h.bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	h.sendCancelButton(chatID, inputTypeCustomNorm, sentMsg.MessageID)
}

func (h *BotHandler) handleTodayStat(ctx context.Context, userID int64, chatID int64, notEnable bool) {
	total, err := h.service.GetTodayStat(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return
	}

	dailyNorm, err := h.service.GetDailyNorm(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return
	}

	daylyStatText := fmt.Sprintf("üìä–°–µ–≥–æ–¥–Ω—è —Ç—ã –æ—Ç–∂–∞–ª—Å—è %d/%d %s.\n%s\n", total, dailyNorm, formatTimesWord(total), generateProgressBar(total, dailyNorm, 10))

	msg := tgbotapi.NewMessage(chatID, daylyStatText)
	msg.ReplyMarkup = ui.MainKeyboard(notEnable)
	h.bot.Send(msg)
}

func generateProgressBar(current, total, barWidth int) string {
	if total <= 0 || barWidth <= 0 {
		return "–ü—Ä–æ–≥—Ä–µ—Å—Å: [–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω]"
	}

	percentage := float64(current) / float64(total)
	clamped := percentage
	if clamped > 1 {
		clamped = 1
	}

	filled := int(clamped * float64(barWidth))
	if filled > barWidth {
		filled = barWidth
	}
	if filled < 0 {
		filled = 0
	}
	empty := barWidth - filled

	bar := strings.Repeat("‚ñà", filled) + strings.Repeat("‚ñë", empty) // –∏–ª–∏  ‚ñë ‚ñí ‚ñì ‚ñà ü™´ üîã
	percentText := int(percentage * 100)

	// –î–æ–±–∞–≤–∏–º –±–æ–Ω—É—Å–Ω—É—é –º–µ—Ç–∫—É –µ—Å–ª–∏ –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–∏–ª
	suffix := ""
	if percentage > 1 {
		suffix = " üèÜ"
	}

	return fmt.Sprintf("–ü—Ä–æ–≥—Ä–µ—Å—Å: [%s] %d%%%s", bar, percentText, suffix)
}

func (h *BotHandler) handleTotalStat(ctx context.Context, userID int64, chatID int64, notEnable bool) {
	total, err := h.service.GetTotalStat(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return
	}

	statText := fmt.Sprintf("üí™–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è —Ç—ã –æ—Ç–∂–∞–ª—Å—è: %d %s\n", total, formatTimesWord(total))
	var FirstWorkoutDateText string

	firstWorkoutDate, err := h.service.GetFirstWorkoutDate(ctx, userID)
	if err != nil || firstWorkoutDate == "" {
		FirstWorkoutDateText = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è"
	}
	FirstWorkoutDateText = fmt.Sprintf("–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: %s", firstWorkoutDate)

	msg := tgbotapi.NewMessage(chatID, statText+FirstWorkoutDateText)
	msg.ReplyMarkup = ui.MainKeyboard(notEnable)
	h.bot.Send(msg)
}

func formatTimesWord(n int) string {
	n = n % 100 // —É—á–∏—Ç—ã–≤–∞–µ–º "11‚Äì14"
	if n >= 11 && n <= 14 {
		return "—Ä–∞–∑"
	}

	switch n % 10 {
	case 1:
		return "—Ä–∞–∑"
	case 2, 3, 4:
		return "—Ä–∞–∑–∞"
	default:
		return "—Ä–∞–∑"
	}
}

func (h *BotHandler) handleStart(ctx context.Context, chatID int64, userID int64, username string, notEnable bool) {

	err := h.service.EnsureUser(ctx, userID, username)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		return
	}

	maxReps, err := h.service.GetUserMaxReps(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", err)
		return
	}

	if maxReps == 0 {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É!")
		h.bot.Send(msg)
		h.requestMaxReps(chatID)
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

	msg.ReplyMarkup = ui.MainKeyboard(notEnable)
	h.bot.Send(msg)
}

func (h *BotHandler) handleTodayLeaderboard(ctx context.Context, chatID int64) {
	leaderboard, err := h.service.GetTodayLeaderboard(ctx)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")
		h.bot.Send(msg)
		return
	}

	var response strings.Builder
	response.WriteString("üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n")
	for _, item := range leaderboard {
		response.WriteString(fmt.Sprintf("%d. %s: %d\n", item.Rank, item.Username, item.Count))
	}

	msg := tgbotapi.NewMessage(chatID, response.String())
	h.bot.Send(msg)
}

// –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã
func (h *BotHandler) handleSetCustomNorm(ctx context.Context, userID int64, chatID int64, dailyNorm int, notEnable bool) {
	if dailyNorm <= 0 {

		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
		msg.ReplyMarkup = tgbotapi.ForceReply{
			ForceReply:            true,
			InputFieldPlaceholder: "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
			Selective:             true,
		}
		sentMsg, err := h.bot.Send(msg)

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			return
		}

		h.sendCancelButton(chatID, inputTypeCustomNorm, sentMsg.MessageID)
		return
	}

	 if dailyNorm > castomDailyNormLimit {
        msg := tgbotapi.NewMessage(chatID, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ - 500 –æ—Ç–∂–∏–º–∞–Ω–∏–π")
		msg.ReplyMarkup = ui.MainKeyboard(notEnable)
        h.bot.Send(msg)
        return
    }

	err := h.service.SetDailyNorm(ctx, userID, dailyNorm)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start.")

		h.bot.Send(msg)
		return
	}
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: %d", dailyNorm))
	msg.ReplyMarkup = ui.MainKeyboard(notEnable)
	h.bot.Send(msg)
}

// sendCancelButton –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç inline-–∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë ID –≤ pendingInput.
// –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—É—é (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞).
func (h *BotHandler) sendCancelButton(chatID int64, inputType inputType, replyMsgID int) {
	// 1) –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å pendingInput ‚Äî —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π (—á—Ç–æ–±—ã –Ω–µ –∫–æ–ø–∏–ª–æ—Å—å)
	if old, ok := h.getPendingInput(chatID); ok {
		if old.cancelMsgID != 0 {
			delOld := tgbotapi.NewDeleteMessage(chatID, old.cancelMsgID)
			if _, err := h.bot.Send(delOld); err != nil {
				// –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ/–∏—Å—Ç–µ–∫–ª–æ
				log.Printf("sendCancelButton: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã (chat=%d, msg=%d): %v", chatID, old.cancelMsgID, err)
			}
		}
	}

	// 2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∏—Ç—å"
	cancelMsg := tgbotapi.NewMessage(chatID, "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª ‚Äî –Ω–∞–∂–º–∏ –û—Ç–º–µ–Ω–∏—Ç—å:")
	cancelMsg.ReplyMarkup = ui.CancelInlineKeyboard()
	sentCancelMsg, err := h.bot.Send(cancelMsg)
	if err != nil {
		log.Printf("sendCancelButton: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã: %v", err)
		return
	}

	// 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º pendingInput –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞)
	h.pendingInputs.Store(chatID, pendingInput{
		inputType:   inputType,
		messageID:   replyMsgID,
		cancelMsgID: sentCancelMsg.MessageID,
	})
}

func (h *BotHandler) getPendingInput(chatID int64) (pendingInput, bool) {
	value, ok := h.pendingInputs.Load(chatID)
	if !ok {
		return pendingInput{}, false
	}
	return value.(pendingInput), true
}

// clearPendingInput —É–¥–∞–ª—è–µ—Ç pendingInput –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
func (h *BotHandler) clearPendingInput(chatID int64) {
	if input, ok := h.getPendingInput(chatID); ok {
		if input.cancelMsgID != 0 {
			del := tgbotapi.NewDeleteMessage(chatID, input.cancelMsgID)
			if _, err := h.bot.Send(del); err != nil {
				log.Printf("clearPendingInput: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã (chat=%d, msg=%d): %v", chatID, input.cancelMsgID, err)
			}
		}
	}
	h.pendingInputs.Delete(chatID)
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
func (h *BotHandler) handleToggleNotifications(ctx context.Context, userID int64, chatID int64, enable bool) {
	var err error
	var message string

	if enable {
		err = h.service.EnableNotifications(ctx, userID)
		message = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö."
	} else {
		
		err = h.service.DisableNotifications(ctx, userID)
		message = "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ù–µ –∑–∞–±—ã–≤–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ! üí™"
	}

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
		msg.ReplyMarkup = ui.MainKeyboard(enable)
		h.bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(chatID, message)
	msg.ReplyMarkup = ui.MainKeyboard(enable)
	h.bot.Send(msg)
}
