package bot

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"sync"
	"time"
	ui "trackerbot/keyboard"
	"trackerbot/service"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type inputType int

const (
	inputTypeDaily inputType = iota
	inputTypeMaxReps
	inputTypeCustomNorm
)

type pendingInput struct {
	expiry    time.Time
	inputType inputType
	messageID int
}

type BotHandler struct {
	bot           *tgbotapi.BotAPI
	service       *service.PushupService
	pendingInputs sync.Map
}

const inputTimeout = 2 * time.Minute

func NewBotHandler(bot *tgbotapi.BotAPI, service *service.PushupService) *BotHandler {
	return &BotHandler{bot: bot, service: service}
}

func (h *BotHandler) HandleUpdate(update tgbotapi.Update) {
	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫—Ä–æ–º–µ —Å–æ–æ–±—â–µ–Ω–∏–π
	if update.Message == nil {
		return
	}

	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
	defer cancel()

	username := update.Message.From.UserName
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞–µ–º—ã–π –≤–≤–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
	if input, ok := h.getPendingInput(chatID); ok {
		if time.Now().After(input.expiry) {
			h.clearPendingInput(chatID)
			msg := tgbotapi.NewMessage(chatID, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É.")
			notificationsEnabled, _ := h.service.GetNotificationsStatus(ctx, userID)
			msg.ReplyMarkup = ui.MainKeyboard(notificationsEnabled)
			h.bot.Send(msg)
			return
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —á–∏—Å–ª–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
		if count, err := strconv.Atoi(update.Message.Text); err == nil {
			h.clearPendingInput(chatID)
			
			// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
			notificationsEnabled, err := h.service.GetNotificationsStatus(ctx, userID)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %v", err)
				notificationsEnabled = true
			}
			
			switch input.inputType {
			case inputTypeDaily:
				h.handleAddPushups(ctx, userID, username, chatID, count, inputTypeDaily, notificationsEnabled)
			case inputTypeMaxReps:
				h.handleAddPushups(ctx, userID, username, chatID, count, inputTypeMaxReps, notificationsEnabled)
			case inputTypeCustomNorm:
				h.handleSetCustomNorm(ctx, userID, chatID, count, notificationsEnabled)
			}
			return
		}

		// –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ (–≤ reply –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
		replyMsg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
		replyMsg.ReplyToMessageID = input.messageID
		h.bot.Send(replyMsg)
		return
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤–≤–æ–¥–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏
	notificationsEnabled, err := h.service.GetNotificationsStatus(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %v", err)
		notificationsEnabled = true
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset
	if update.Message.Text == "üîÑ –°–±—Ä–æ—Å" {
		if err := h.service.ResetMaxReps(ctx, userID); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ max_reps: %v", err)
			msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			h.bot.Send(msg)
			return
		}

		msg := tgbotapi.NewMessage(chatID, "‚úÖ –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (40)")
		msg.ReplyMarkup = ui.MainKeyboard(notificationsEnabled)
		h.bot.Send(msg)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
	switch update.Message.Text {
	case "/start":
		h.handleStart(ctx, chatID, userID, notificationsEnabled)
	case "–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è":
		h.requestPushupCount(chatID, inputTypeDaily)
	case "üéØ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ—Ä–º—É":
		h.requestPushupCount(chatID, inputTypeMaxReps)
	case "üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ—Ä–º—É":
		h.requestCustomNorm(chatID)
	case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		h.handleTodayStat(ctx, userID, chatID, notificationsEnabled)
		h.handleTotalStat(ctx, userID, chatID, notificationsEnabled)
		h.handleTodayLeaderboard(ctx, chatID)
	case "üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
		h.handleToggleNotifications(ctx, userID, chatID, false)
	case "üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
		h.handleToggleNotifications(ctx, userID, chatID, true)
	case "üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		msg.ReplyMarkup = ui.SettingsKeyboard(notificationsEnabled)
		h.bot.Send(msg)
	case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
		msg := tgbotapi.NewMessage(chatID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
		msg.ReplyMarkup = ui.MainKeyboard(notificationsEnabled)
		h.bot.Send(msg)
	default:
		// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏
		if strings.HasPrefix(update.Message.Text, "/") {
			msg := tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")
			msg.ReplyMarkup = ui.MainKeyboard(notificationsEnabled)
			h.bot.Send(msg)
		}
		// –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ "/" –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
	}
}


func (h *BotHandler) handleAddPushups(ctx context.Context, userID int64, username string, chatID int64, count int, inputType inputType, notEnable bool) {
	if count <= 0 {
		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π input –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è messageID
		if input, ok := h.getPendingInput(chatID); ok {
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º ForceReply –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ Reply
			msg.ReplyMarkup = tgbotapi.ForceReply{ForceReply: true, Selective: true}
			msg.ReplyToMessageID = input.messageID
			sentMsg, err := h.bot.Send(msg)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
				return
			}
			// –û–±–Ω–æ–≤–ª—è–µ–º messageID –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ reply
			h.setPendingInput(chatID, input.inputType, time.Now().Add(inputTimeout), sentMsg.MessageID)
		}
		return
	}

	isMaxReps := inputType == inputTypeMaxReps
	result, err := h.service.AddPushups(ctx, userID, username, count, isMaxReps)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∂–∏–º–∞–Ω–∏–π: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return
	}

	log.Printf("Username%s UserID %d added %d pushups", username, userID, count)

	var response string
	if inputType == inputTypeMaxReps {
		response = fmt.Sprintf("üîî–¢–≤–æ—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: %d\n", result.DailyNorm)
	}

	response += fmt.Sprintf("‚úÖ–î–æ–±–∞–≤–ª–µ–Ω–æ: %d –æ—Ç–∂–∏–º–∞–Ω–∏–π!\nüìà–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: %d/%d\n", count, result.TotalToday, result.DailyNorm)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º—ã —á–µ—Ä–µ–∑ –∫–µ—à
	hasCompleted, firstCompleter := h.service.CheckNormCompletion(result.DailyNorm)

	var responseFirstCompleter string
	
	if !hasCompleted {
		responseFirstCompleter = "‚ùå –ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –Ω–æ—Ä–º—É —Å–µ–≥–æ–¥–Ω—è.\n–ú–æ–∂–µ—Ç, —Ç—ã –±—É–¥–µ—à—å –ø–µ—Ä–≤—ã–º? üí™\n\n"
	} else {
		responseFirstCompleter = fmt.Sprintf("üéØ %s —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª –Ω–æ—Ä–º—É!\n–ê —Ç—ã –Ω–µ –æ—Ç—Å—Ç–∞–≤–∞–π, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è! üöÄ\n\n", firstCompleter)
	}

	if result.TotalToday >= result.DailyNorm {
		response += "\nüéØ–¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É!\n"
		responseFirstCompleter = ""
	}

	msg := tgbotapi.NewMessage(chatID, response+responseFirstCompleter)
	msg.ReplyMarkup = ui.MainKeyboard(notEnable)
	h.bot.Send(msg)
}

func (h *BotHandler) handleTodayStat(ctx context.Context, userID int64, chatID int64, notEnable bool) {
	total, err := h.service.GetTodayStat(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return
	}

	dailyNorm, err := h.service.GetDailyNorm(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return
	}

	daylyStatText :=  fmt.Sprintf("üìä–°–µ–≥–æ–¥–Ω—è —Ç—ã –æ—Ç–∂–∞–ª—Å—è %d/%d %s.\n%s\n", total, dailyNorm, formatTimesWord(total), generateProgressBar(total, dailyNorm, 10))

	msg := tgbotapi.NewMessage(chatID, daylyStatText)
	msg.ReplyMarkup = ui.MainKeyboard(notEnable)
	h.bot.Send(msg)
}

func generateProgressBar(current, total, barWidth int) string {
	if total <= 0 || barWidth <= 0 {
		return "–ü—Ä–æ–≥—Ä–µ—Å—Å: [–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω]"
	}

	percentage := float64(current) / float64(total)
	clamped := percentage
	if clamped > 1 {
		clamped = 1
	}

	filled := int(clamped * float64(barWidth))
	if filled > barWidth {
		filled = barWidth
	}
	if filled < 0 {
		filled = 0
	}
	empty := barWidth - filled

	bar := strings.Repeat("üîã", filled) + strings.Repeat("ü™´", empty) // –∏–ª–∏  ‚ñë ‚ñí ‚ñì ‚ñà
	percentText := int(percentage * 100)

	// –î–æ–±–∞–≤–∏–º –±–æ–Ω—É—Å–Ω—É—é –º–µ—Ç–∫—É –µ—Å–ª–∏ –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–∏–ª
	suffix := ""
	if percentage > 1 {
		suffix = " üèÜ"
	}

	return fmt.Sprintf("–ü—Ä–æ–≥—Ä–µ—Å—Å: [%s] %d%%%s", bar, percentText, suffix)
}

func (h *BotHandler) handleTotalStat(ctx context.Context, userID int64, chatID int64, notEnable bool) {
	total, err := h.service.GetTotalStat(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return
	}

	statText := fmt.Sprintf("üí™–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è —Ç—ã –æ—Ç–∂–∞–ª—Å—è: %d %s\n", total, formatTimesWord(total))
	var FirstWorkoutDateText string

	firstWorkoutDate, err := h.service.GetFirstWorkoutDate(ctx, userID)
	if err != nil || firstWorkoutDate == "" {
		FirstWorkoutDateText = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è"
	} 
	FirstWorkoutDateText = fmt.Sprintf("–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: %s", firstWorkoutDate)
	
	msg := tgbotapi.NewMessage(chatID, statText+FirstWorkoutDateText)
	msg.ReplyMarkup = ui.MainKeyboard(notEnable)
	h.bot.Send(msg)
}

func formatTimesWord(n int) string {
	n = n % 100 // —É—á–∏—Ç—ã–≤–∞–µ–º "11‚Äì14"
	if n >= 11 && n <= 14 {
		return "—Ä–∞–∑"
	}

	switch n % 10 {
	case 1:
		return "—Ä–∞–∑"
	case 2, 3, 4:
		return "—Ä–∞–∑–∞"
	default:
		return "—Ä–∞–∑"
	}
}

func (h *BotHandler) handleStart(ctx context.Context, chatID int64, userID int64, notEnable bool) {

	maxReps, err := h.service.GetUserMaxReps(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", err)
		return
	}

	if maxReps == 0 {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É!")
		h.bot.Send(msg)
		h.requestPushupCount(chatID, inputTypeMaxReps)
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

	msg.ReplyMarkup = ui.MainKeyboard(notEnable)
	h.bot.Send(msg)
}

func (h *BotHandler) handleTodayLeaderboard(ctx context.Context, chatID int64) {
	leaderboard, err := h.service.GetTodayLeaderboard(ctx)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")
		h.bot.Send(msg)
		return
	}

	var response strings.Builder
	response.WriteString("üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n")
	for _, item := range leaderboard {
		response.WriteString(fmt.Sprintf("%d. %s: %d\n", item.Rank, item.Username, item.Count))
	}

	msg := tgbotapi.NewMessage(chatID, response.String())
	h.bot.Send(msg)
}

func (h *BotHandler) requestPushupCount(chatID int64, inputType inputType) {
	var messageText string
	if inputType == inputTypeDaily {
		messageText = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π:"
	} else {
		messageText = "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥:"
	}

	// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(chatID, messageText)
	msg.ReplyMarkup = tgbotapi.ForceReply{ForceReply: true, Selective: true}
	sentMsg, err := h.bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è reply
	h.setPendingInput(chatID, inputType, time.Now().Add(inputTimeout), sentMsg.MessageID)
}

// –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã
func (h *BotHandler) handleSetCustomNorm(ctx context.Context, userID int64, chatID int64, dailyNorm int, notEnable bool) {
	if dailyNorm <= 0 {
		
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
		msg.ReplyMarkup = tgbotapi.ForceReply{ForceReply: true, Selective: true}
		sentMsg, err := h.bot.Send(msg)
	
		if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}
		h.setPendingInput(chatID, inputTypeCustomNorm, time.Now().Add(inputTimeout), sentMsg.MessageID)
		h.bot.Send(msg)
		return
	}
	err := h.service.SetDailyNorm(ctx, userID, dailyNorm)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return
	}
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: %d", dailyNorm))
	msg.ReplyMarkup = ui.MainKeyboard(notEnable)
	h.bot.Send(msg)
}

func (h *BotHandler) requestCustomNorm(chatID int64) {
	// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –æ—Ç–∂–∏–º–∞–Ω–∏–π:")
	msg.ReplyMarkup = tgbotapi.ForceReply{ForceReply: true, Selective: true}
	sentMsg, err := h.bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è reply
	h.setPendingInput(chatID, inputTypeCustomNorm, time.Now().Add(inputTimeout), sentMsg.MessageID)
}

func (h *BotHandler) setPendingInput(chatID int64, inputType inputType, expiry time.Time, messageID int) {
	h.pendingInputs.Store(chatID, pendingInput{
		expiry:    expiry,
		inputType: inputType,
		messageID: messageID,
	})
}

func (h *BotHandler) getPendingInput(chatID int64) (pendingInput, bool) {
	value, ok := h.pendingInputs.Load(chatID)
	if !ok {
		return pendingInput{}, false
	}
	return value.(pendingInput), true
}

func (h *BotHandler) clearPendingInput(chatID int64) {
	h.pendingInputs.Delete(chatID)
}

func (h *BotHandler) CleanupExpiredInputs() {
	
	for {
		time.Sleep(1 * time.Second)

		now := time.Now()
		h.pendingInputs.Range(func(key, value interface{}) bool {
			input := value.(pendingInput)
			if now.After(input.expiry) {
				chatID := key.(int64)

				h.pendingInputs.Delete(key)

				msg := tgbotapi.NewMessage(chatID, "‚åõ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (10 —Å–µ–∫—É–Ω–¥).")

				ctx := context.Background()
				userID := chatID
				notificationsEnabled, err := h.service.GetNotificationsStatus(ctx, userID)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–πctx: %v", err)
					notificationsEnabled = true
				}

				msg.ReplyMarkup = ui.MainKeyboard(notificationsEnabled)
				if _, err := h.bot.Send(msg); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ: %v", err)
				}
				log.Printf("–û—Ç–º–µ–Ω–µ–Ω –≤–≤–æ–¥ –¥–ª—è —á–∞—Ç–∞ %d –ø–æ —Ç–∞–π–º–∞—É—Ç—É", chatID)
			}
			return true
		})
	}
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
func (h *BotHandler) handleToggleNotifications(ctx context.Context, userID int64, chatID int64, enable bool) {
	var err error
	var message string

	if enable {
		err = h.service.EnableNotifications(ctx, userID)
		message = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö."
	} else {
		err = h.service.DisableNotifications(ctx, userID)
		message = "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ù–µ –∑–∞–±—ã–≤–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ! üí™"
	}

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
		msg.ReplyMarkup = ui.MainKeyboard(enable)
		h.bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(chatID, message)
	msg.ReplyMarkup = ui.MainKeyboard(enable)
	h.bot.Send(msg)
}
