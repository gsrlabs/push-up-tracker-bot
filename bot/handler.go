// –ü–∞–∫–µ—Ç bot —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram-–∫–æ–º–∞–Ω–¥ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
package bot

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"sync"
	"time"

	"trackerbot/service"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// BotHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
type BotHandler struct {
	bot           *tgbotapi.BotAPI       // –ö–ª–∏–µ–Ω—Ç Telegram Bot API
	service       *service.PushupService // –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∂–∏–º–∞–Ω–∏—è–º–∏
	pendingInputs sync.Map // –°–µ—Ä–≤–∏—Å –¥–ª—è —É–¥–∞–ª—è–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è 
}

const inputTimeout = 10 * time.Second

// NewBotHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–∞
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:
// - bot: –∫–ª–∏–µ–Ω—Ç Telegram API
// - service: —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–∂–∏–º–∞–Ω–∏–π
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
// - —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–π BotHandler
func NewBotHandler(bot *tgbotapi.BotAPI, service *service.PushupService) *BotHandler {
	return &BotHandler{bot: bot, service: service}
}

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–µ—Ç–æ–¥—É
func (h *BotHandler) HandleUpdate(update tgbotapi.Update) {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
	defer cancel() // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤

	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if update.Message == nil {
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞
	username := update.Message.From.UserName
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
	if expiry, ok := h.getPendingInput(chatID); ok {
		if time.Now().After(expiry) {
			// –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –Ω–æ cleanup –µ—â–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
			h.clearPendingInput(chatID)
			msg := tgbotapi.NewMessage(chatID, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É.")
			msg.ReplyMarkup = mainKeyboard()
			h.bot.Send(msg)
			return
		}

		// –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ
		if count, err := strconv.Atoi(update.Message.Text); err == nil {
			h.clearPendingInput(chatID)
			h.handleAddPushups(ctx, userID, username, chatID, count)
			return
		}

		// –ù–µ —á–∏—Å–ª–æ - —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
		h.bot.Send(msg)
		return
	}

	// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
	switch update.Message.Text {
	case "/start":
		h.handleStart(chatID) // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
	case "–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è":
		h.requestPushupCount(chatID) // –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∂–∏–º–∞–Ω–∏–π
	case "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è":
		h.handleTodayLeaderboard(ctx, chatID) // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
	case "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è":
		h.handleTotalStat(ctx, userID, chatID) // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	default:
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")
		msg.ReplyMarkup = mainKeyboard()
		h.bot.Send(msg)
	}
}

// handleAddPushups –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ—Ç–∂–∏–º–∞–Ω–∏–π
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
// - ctx: –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
// - userID: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// - chatID: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
// - count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
func (h *BotHandler) handleAddPushups(ctx context.Context, userID int64, username string, chatID int64, count int) {

	// –í–∞–ª–∏–¥–∞—Ü–∏—é –≤–≤–æ–¥–∞

	if count <= 0 {
		h.setPendingInput(chatID, time.Now().Add(inputTimeout))
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
		h.bot.Send(msg)
		return
	}

	// –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∂–∏–º–∞–Ω–∏–π
	response, err := h.service.AddPushups(ctx, userID, username, count)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∂–∏–º–∞–Ω–∏–π: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return
	}

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
	log.Printf("Username%s UserID %d added %d pushups", username, userID, count)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
	msg := tgbotapi.NewMessage(chatID, response)
	msg.ReplyMarkup = mainKeyboard() // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	h.bot.Send(msg)

}

// handleTodayStat –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
// - ctx: –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
// - userID: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// - chatID: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
func (h *BotHandler) handleTodayStat(ctx context.Context, userID int64, chatID int64) {
	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
	total, err := h.service.GetTodayStat(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–°–µ–≥–æ–¥–Ω—è –≤—ã –æ—Ç–∂–∞–ª–∏—Å—å %d —Ä–∞–∑.", total))
	msg.ReplyMarkup = mainKeyboard()
	h.bot.Send(msg)
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
// - chatID: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
func (h *BotHandler) handleStart(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ReplyMarkup = mainKeyboard() // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	h.bot.Send(msg)
}

// handleTotalStat –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
// - ctx: –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
// - userID: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// - chatID: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
func (h *BotHandler) handleTotalStat(ctx context.Context, userID int64, chatID int64) {
	// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
	msg := tgbotapi.NewMessage(chatID, "–í—ã–≤–æ–¥ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
	h.bot.Send(msg)
}

func (h *BotHandler) handleTodayLeaderboard(ctx context.Context, chatID int64) {
    leaderboard, err := h.service.GetTodayLeaderboard(ctx)
    if err != nil {
        log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: %v", err)
        msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")
        h.bot.Send(msg)
        return
    }
    
    var response strings.Builder
    response.WriteString("üèÜ –†–µ–π—Ç–∏–Ω–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n")
    for _, item := range leaderboard {
        response.WriteString(fmt.Sprintf("%d. %s: %d\n", item.Rank, item.Username, item.Count))
    }
    
    msg := tgbotapi.NewMessage(chatID, response.String())
    h.bot.Send(msg)
}

// requestPushupCount –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
// - chatID: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
func (h *BotHandler) requestPushupCount(chatID int64) {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã
	h.setPendingInput(chatID, time.Now().Add(inputTimeout))

	msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π:")
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	h.bot.Send(msg)
}

// setPendingInput —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
func (h *BotHandler) setPendingInput(chatID int64, expiry time.Time) {
	h.pendingInputs.Store(chatID, expiry)
}

// getPendingInput –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è —á–∞—Ç–∞
func (h *BotHandler) getPendingInput(chatID int64) (time.Time, bool) {
	value, ok := h.pendingInputs.Load(chatID)
	if !ok {
		return time.Time{}, false
	}
	return value.(time.Time), true
}

// clearPendingInput —É–¥–∞–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
func (h *BotHandler) clearPendingInput(chatID int64) {
	h.pendingInputs.Delete(chatID)
}

// cleanupExpiredInputs –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
func (h *BotHandler) CleanupExpiredInputs() {
	for {
		time.Sleep(1 * time.Second) // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—â–µ - –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

		now := time.Now()
		h.pendingInputs.Range(func(key, value interface{}) bool {
			expiry := value.(time.Time)
			if now.After(expiry) {
				chatID := key.(int64)
				h.pendingInputs.Delete(key)

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
				msg := tgbotapi.NewMessage(chatID, "‚åõ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (10 —Å–µ–∫—É–Ω–¥).")
				msg.ReplyMarkup = mainKeyboard()
				if _, err := h.bot.Send(msg); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ: %v", err)
				}
				log.Printf("–û—Ç–º–µ–Ω–µ–Ω –≤–≤–æ–¥ –¥–ª—è —á–∞—Ç–∞ %d –ø–æ —Ç–∞–π–º–∞—É—Ç—É", chatID)
			}
			return true
		})
	}
}
