package bot

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"sync"
	"time"
	"trackerbot/service"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type inputType int

const (
	inputTypeDaily inputType = iota
	inputTypeMaxReps
)

type pendingInput struct {
	expiry    time.Time
	inputType inputType
}

type BotHandler struct {
	bot           *tgbotapi.BotAPI
	service       *service.PushupService
	pendingInputs sync.Map
}

const inputTimeout = 10 * time.Second

func NewBotHandler(bot *tgbotapi.BotAPI, service *service.PushupService) *BotHandler {
	return &BotHandler{bot: bot, service: service}
}

func (h *BotHandler) HandleUpdate(update tgbotapi.Update) {
	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
	defer cancel()

	if update.Message == nil {
		return
	}

	username := update.Message.From.UserName
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset
	if update.Message.Text == "–°–±—Ä–æ—Å" {

		if err := h.service.ResetMaxReps(ctx, userID); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ max_reps: %v", err)
			msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			h.bot.Send(msg)
			return
		}

		msg := tgbotapi.NewMessage(chatID, "‚úÖ –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (40)")
		msg.ReplyMarkup = mainKeyboard()
		h.bot.Send(msg)
		return
	}

	if input, ok := h.getPendingInput(chatID); ok {
		if time.Now().After(input.expiry) {
			h.clearPendingInput(chatID)
			msg := tgbotapi.NewMessage(chatID, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É.")
			msg.ReplyMarkup = mainKeyboard()
			h.bot.Send(msg)
			return
		}

		if count, err := strconv.Atoi(update.Message.Text); err == nil {
			h.clearPendingInput(chatID)
			switch input.inputType {
			case inputTypeDaily:
				h.handleAddPushups(ctx, userID, username, chatID, count, inputTypeDaily)
			case inputTypeMaxReps:
				h.handleAddPushups(ctx, userID, username, chatID, count, inputTypeMaxReps)
			}
			return
		}

		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
		h.bot.Send(msg)
		return
	}

	switch update.Message.Text {
	case "/start":
		h.handleStart(ctx, userID, chatID)
	case "+ –∑–∞ –¥–µ–Ω—å":
		h.requestPushupCount(chatID, inputTypeDaily)
	case "+ –∑–∞ –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥":
		h.requestPushupCount(chatID, inputTypeMaxReps)
	case "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		h.handleTodayStat(ctx, userID, chatID)
		h.handleTotalStat(ctx, userID, chatID)
		h.handleTodayLeaderboard(ctx, chatID)
	default:
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")
		msg.ReplyMarkup = mainKeyboard()
		h.bot.Send(msg)
	}
}

func (h *BotHandler) handleAddPushups(ctx context.Context, userID int64, username string, chatID int64, count int, inputType inputType) {
	if count <= 0 {
		h.setPendingInput(chatID, inputType, time.Now().Add(inputTimeout))
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
		h.bot.Send(msg)
		return
	}

	isMaxReps := (inputType == inputTypeMaxReps)
	result, err := h.service.AddPushups(ctx, userID, username, count, isMaxReps)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∂–∏–º–∞–Ω–∏–π: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return
	}

	log.Printf("Username%s UserID %d added %d pushups", username, userID, count)

	maxReps, err := h.service.GetUserMaxReps(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", err)
		return
	}

	var response string
	if inputType == inputTypeMaxReps && count >= maxReps {
		response = fmt.Sprintf("üîî–¢–≤–æ—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: %d\n", result.DailyNorm)
	}

	response += fmt.Sprintf("‚úÖ–î–æ–±–∞–≤–ª–µ–Ω–æ: %d –æ—Ç–∂–∏–º–∞–Ω–∏–π!\nüìà–¢–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: %d/%d", count, result.TotalToday, result.DailyNorm)

	if result.TotalToday >= result.DailyNorm {
		response += "\nüéØ–¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É!"
	}

	msg := tgbotapi.NewMessage(chatID, response)
	msg.ReplyMarkup = mainKeyboard()
	h.bot.Send(msg)
}

func (h *BotHandler) handleTodayStat(ctx context.Context, userID int64, chatID int64) {
	total, err := h.service.GetTodayStat(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return
	}

	maxReps, err := h.service.GetUserMaxReps(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ max_reps: %v", err)
	}

	dailyNorm := service.CalculateDailyNorm(maxReps)
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üìä–°–µ–≥–æ–¥–Ω—è —Ç—ã –æ—Ç–∂–∞–ª—Å—è %d/%d %s.\n%s\n", total, dailyNorm, formatTimesWord(total), generateProgressBar(total, dailyNorm, 10)))
	msg.ReplyMarkup = mainKeyboard()
	h.bot.Send(msg)
}

func generateProgressBar(current, total, barWidth int) string {
	if total <= 0 || barWidth <= 0 {
		return "–ü—Ä–æ–≥—Ä–µ—Å—Å: [–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω]"
	}

	percentage := float64(current) / float64(total)
	clamped := percentage
	if clamped > 1 {
		clamped = 1
	}

	filled := int(clamped * float64(barWidth))
	if filled > barWidth {
		filled = barWidth
	}
	if filled < 0 {
		filled = 0
	}
	empty := barWidth - filled

	bar := strings.Repeat("üîã", filled) + strings.Repeat("ü™´", empty) // –∏–ª–∏  ‚ñë ‚ñí ‚ñì ‚ñà
	percentText := int(percentage * 100)

	// –î–æ–±–∞–≤–∏–º –±–æ–Ω—É—Å–Ω—É—é –º–µ—Ç–∫—É –µ—Å–ª–∏ –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–∏–ª
	suffix := ""
	if percentage > 1 {
		suffix = " üèÜ"
	}

	return fmt.Sprintf("–ü—Ä–æ–≥—Ä–µ—Å—Å: [%s] %d%%%s", bar, percentText, suffix)
}

func (h *BotHandler) handleTotalStat(ctx context.Context, userID int64, chatID int64) {
	total, err := h.service.GetTotalStat(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return
	}

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üí™–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è —Ç—ã –æ—Ç–∂–∞–ª—Å—è: %d %s", total, formatTimesWord(total)))
	msg.ReplyMarkup = mainKeyboard()
	h.bot.Send(msg)
}

func formatTimesWord(n int) string {
	n = n % 100 // —É—á–∏—Ç—ã–≤–∞–µ–º "11‚Äì14"
	if n >= 11 && n <= 14 {
		return "—Ä–∞–∑"
	}

	switch n % 10 {
	case 1:
		return "—Ä–∞–∑"
	case 2, 3, 4:
		return "—Ä–∞–∑–∞"
	default:
		return "—Ä–∞–∑"
	}
}

func (h *BotHandler) handleStart(ctx context.Context, chatID int64, userID int64) {

	maxReps, err := h.service.GetUserMaxReps(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", err)
		return
	}

	if maxReps == 0 {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É!")
		h.bot.Send(msg)
		h.requestPushupCount(chatID, inputTypeMaxReps)
		return
	} 

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

	msg.ReplyMarkup = mainKeyboard()
	h.bot.Send(msg)
}

func (h *BotHandler) handleTodayLeaderboard(ctx context.Context, chatID int64) {
	leaderboard, err := h.service.GetTodayLeaderboard(ctx)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")
		h.bot.Send(msg)
		return
	}

	var response strings.Builder
	response.WriteString("üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n")
	for _, item := range leaderboard {
		response.WriteString(fmt.Sprintf("%d. %s: %d\n", item.Rank, item.Username, item.Count))
	}

	msg := tgbotapi.NewMessage(chatID, response.String())
	h.bot.Send(msg)
}

func (h *BotHandler) requestPushupCount(chatID int64, inputType inputType) {
	h.setPendingInput(chatID, inputType, time.Now().Add(inputTimeout))

	var messageText string
	if inputType == inputTypeDaily {
		messageText = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π:"
	} else {
		messageText = "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥:"
	}

	msg := tgbotapi.NewMessage(chatID, messageText)
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	h.bot.Send(msg)
}

func (h *BotHandler) setPendingInput(chatID int64, inputType inputType, expiry time.Time) {
	h.pendingInputs.Store(chatID, pendingInput{
		expiry:    expiry,
		inputType: inputType,
	})
}

func (h *BotHandler) getPendingInput(chatID int64) (pendingInput, bool) {
	value, ok := h.pendingInputs.Load(chatID)
	if !ok {
		return pendingInput{}, false
	}
	return value.(pendingInput), true
}

func (h *BotHandler) clearPendingInput(chatID int64) {
	h.pendingInputs.Delete(chatID)
}

func (h *BotHandler) CleanupExpiredInputs() {
	for {
		time.Sleep(1 * time.Second)

		now := time.Now()
		h.pendingInputs.Range(func(key, value interface{}) bool {
			input := value.(pendingInput)
			if now.After(input.expiry) {
				chatID := key.(int64)
				h.pendingInputs.Delete(key)

				msg := tgbotapi.NewMessage(chatID, "‚åõ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (10 —Å–µ–∫—É–Ω–¥).")
				msg.ReplyMarkup = mainKeyboard()
				if _, err := h.bot.Send(msg); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ: %v", err)
				}
				log.Printf("–û—Ç–º–µ–Ω–µ–Ω –≤–≤–æ–¥ –¥–ª—è —á–∞—Ç–∞ %d –ø–æ —Ç–∞–π–º–∞—É—Ç—É", chatID)
			}
			return true
		})
	}
}
