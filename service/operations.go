package service

import (
	"fmt"
	"math"
	"strings"
)
	
const (
	// –ë–∞–∑–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
	MinDailyPushups       = 40   // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞
	MaxDailyPushups       = 250  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–µ–¥–µ–ª
	AbsoluteMaxPushups    = 500  // –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –º–∞–∫—Å–∏–º—É–º –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤

	// –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ (–º–∞–∫—Å. –æ—Ç–∂–∏–º–∞–Ω–∏—è –∑–∞ –ø–æ–¥—Ö–æ–¥)
	StartingThreshold     = 10   // ‚â§10 - —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
	BeginnerThreshold     = 20   // ‚â§20 - –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
	IntermediateThreshold = 30   // ‚â§30 - —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
	AdvancedThreshold     = 40   // ‚â§40 - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
	ExpertThreshold       = 50   // ‚â§51+ - —ç–∫—Å–ø–µ—Ä—Ç

	// –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º—ã
	BaseCoefficient      = 5.0   // –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
	CoefficientStep      = 0.025 // –®–∞–≥ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
	MinCoefficient       = 2.5   // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç

	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ACSM
	ACSMIntensityRatio   = 0.7   // 70% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞ –∑–∞ –ø–æ–¥—Ö–æ–¥
	RecoveryHours        = 48    // –ß–∞—Å—ã –æ—Ç–¥—ã—Ö–∞ –º–µ–∂–¥—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
)

// CalculateDailyNorm —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É —Å —É–º–µ–Ω—å—à–∞—é—â–∏–º—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
// –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
//   maxReps - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫—Ä–∞—Ç–Ω–æ–µ 5)
func CalculateDailyNorm(maxReps int) int {
	// –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	if maxReps <= 0 {
		return MinDailyPushups
	}
	if maxReps > 100 {
		return MaxDailyPushups
	}

	// –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Å —É–º–µ–Ω—å—à–∞—é—â–∏–º—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
	coefficient := getSmoothCoefficient(maxReps)
	rawNorm := float64(maxReps) * coefficient

	// –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 5
	norm := int(math.Round(rawNorm/5)) * 5

	// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
	return clamp(norm, MinDailyPushups, MaxDailyPushups)
}


func getSmoothCoefficient(maxReps int) float64 {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π ACSM
	// –°–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º ACSM (American College of Sports Medicine)
    var base float64
    
    switch {
    case maxReps <= StartingThreshold:  // –ù–æ–≤–∏—á–∫–∏ (ACSM: 30-50)
        base = 4  // (30+50)/2 / 10 = 4
    case maxReps <= BeginnerThreshold:  // –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (ACSM: 40-60)
        base = 2.5  // (40+60)/2 / 20 = 2.5
    case maxReps <= IntermediateThreshold:  // –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (ACSM: 60-80)
        base = 2.33 // (60+80)/2 / 30 ‚âà 2.33
    case maxReps <= AdvancedThreshold:  // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (ACSM: 80-120)
        base = 2.5  // (80+120)/2 / 40 = 2.5
    case maxReps <= ExpertThreshold:  // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ (ACSM: 120-150)
        base = 2.7  // (120+150)/2 / 50 = 2.7
    default:            // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã (ACSM: 150-250)
        base = 2.5  // (150+250)/2 / 80 ‚âà 2.5 (–¥–ª—è maxReps=80)
    }
    
    // –ü–ª–∞–≤–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –º–µ–∂–¥—É –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
    smoothBase := BaseCoefficient - CoefficientStep*float64(maxReps)
    
    // –ö–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É –ø–ª–∞–≤–Ω–æ—Å—Ç—å—é –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º ACSM
    finalCoeff := (base + smoothBase) / 2
    
    return math.Max(math.Min(finalCoeff, BaseCoefficient), MinCoefficient)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
func clamp(value, min, max int) int {
	if value < min {
		return min
	}
	if value > max {
		return max
	}
	return value
}


// GetUserRank –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ maxReps
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–æ—Ä–æ–≥–æ–≤ —Ä–∞–Ω–≥–æ–≤
const (
    RankSleepyFly      = 0
    RankSprout         = 5 // +5
    RankWorker         = 10 // +5
    RankTrainee        = 15 // +5
    RankRocket         = 20 // +5
    RankKnight         = 25 // +5
    RankImpenetrable   = 30 // +5
    RankThunder        = 40 // +10
    RankAdept          = 50 // +10
    RankGravity        = 65 // +15
    RankLegend         = 80 // +15
    LordOfPushUps      = 100 // +20
)

type UserRank struct {
    threshold int
    rank string
} 

// –†–∞–Ω–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è
var userRanks = []UserRank{
    {RankSleepyFly, "üí§ –°–æ–Ω–Ω–∞—è –º—É—Ö–∞"},
    {RankSprout, "üå± –†–æ—Å—Ç–æ–∫ —Å–∏–ª—ã"},
    {RankWorker, "üêú –¢—Ä—É–¥—è–≥–∞"},
    {RankTrainee, "üöÄ –°—Ç–∞–∂—ë—Ä –∫–æ—Å–º–æ—Å–∞"},
    {RankRocket, "üöÄ –†–∞–∫–µ—Ç–∞-–Ω–æ—Å–∏—Ç–µ–ª—å"},
    {RankKnight, "‚öîÔ∏è –†—ã—Ü–∞—Ä—å —Å–≤–µ—Ç–∞"},
    {RankImpenetrable, "üõ°Ô∏è –ù–µ–ø—Ä–æ–±–∏–≤–∞–µ–º—ã–π"},
    {RankThunder, "‚ö° –ì—Ä–æ–∑–∞ –ø–æ–ª–∞"},
    {RankAdept, "üèπ –ê–¥–µ–ø—Ç —É–ø–æ—Ä—Å—Ç–≤–∞"},
    {RankGravity, "üåå –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏"},
    {RankLegend, "üèÜ –õ–µ–≥–µ–Ω–¥–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤"},
    {LordOfPushUps, "üåü –í–õ–ê–°–¢–ï–õ–ò–ù –û–¢–ñ–ò–ú–ê–ù–ò–ô"},
}



// GetUserRank –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ maxReps
func GetUserRank(maxReps int) string {
    for i := len(userRanks) - 1; i >= 0; i-- {
        if maxReps >= userRanks[i].threshold {
            return userRanks[i].rank
        }
    }
    return "üåü –í–õ–ê–°–¢–ï–õ–ò–ù –û–¢–ñ–ò–ú–ê–ù–ò–ô"
}

// GetRepsToNextRank –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
func GetRepsToNextRank(maxReps int) int {
    currentRankIndex := -1
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–Ω–≥–∞
    for i := len(userRanks) - 1; i >= 0; i-- {
        if maxReps >= userRanks[i].threshold {
            currentRankIndex = i
            break
        }
    }
    
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥ - –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
    if currentRankIndex == len(userRanks)-1 || maxReps > LordOfPushUps {
        return 0
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–∞–Ω–≥ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if currentRankIndex == -1 {
        return RankSprout - maxReps
    }
    
    // –°–ª–µ–¥—É—é—â–∏–π —Ä–∞–Ω–≥
    nextRank := userRanks[currentRankIndex+1]
    return nextRank.threshold - maxReps
}



// CalculateNextTarget —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω–∏–º—É–º –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å maxReps –Ω–∞ –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–µ.
// –ê—Ä–≥—É–º–µ–Ω—Ç:
//   currentMaxReps - —Ç–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∑–∞ –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
func CalculateNextTarget(currentMaxReps int) int {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if currentMaxReps < 0 {
        return 1
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    switch {
    case currentMaxReps < 5: 
        // –£—Ä–æ–≤–µ–Ω—å: –ù–∞—á–∏–Ω–∞—é—â–∏–π (–æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π)
        return 1
    case currentMaxReps >= 5 && currentMaxReps < 15:
        // –£—Ä–æ–≤–µ–Ω—å: –†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è (–Ω–∏–∑–∫–∏–π)
        return 2
    case currentMaxReps >= 15 && currentMaxReps < 30:
        // –£—Ä–æ–≤–µ–Ω—å: –°—Ä–µ–¥–Ω–∏–π
        return 3
    case currentMaxReps >= 30 && currentMaxReps < 50:
        // –£—Ä–æ–≤–µ–Ω—å: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
        return 2 // –£–º–µ–Ω—å—à–∞–µ–º —à–∞–≥, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–º–µ–¥–ª—è–µ—Ç—Å—è
    case currentMaxReps >= 50 && currentMaxReps < 100:
        // –£—Ä–æ–≤–µ–Ω—å: –û–ø—ã—Ç–Ω—ã–π
        return 1
    default:
        // –£—Ä–æ–≤–µ–Ω—å: –ú–∞—Å—Ç–µ—Ä (100+)
        // –ù–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞ –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç–µ–ª—å–Ω–æ.
        // –¶–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–µ–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–≤–∑—Ä—ã–≤–Ω–∞—è —Å–∏–ª–∞, –≤–∞—Ä–∏–∞—Ü–∏–∏).
        return 0
    }
}


func GenerateProgressBar(current, total, barWidth int) string {
	if total <= 0 || barWidth <= 0 {
		return "–ü—Ä–æ–≥—Ä–µ—Å—Å: [–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω]"
	}

	percentage := float64(current) / float64(total)
	clamped := percentage
	if clamped > 1 {
		clamped = 1
	}

	filled := int(clamped * float64(barWidth))
	if filled > barWidth {
		filled = barWidth
	}
	if filled < 0 {
		filled = 0
	}
	empty := barWidth - filled

	bar := strings.Repeat("‚ñà", filled) + strings.Repeat("‚ñë", empty) // –∏–ª–∏  ‚ñë ‚ñí ‚ñì ‚ñà ü™´ üîã
	percentText := int(percentage * 100)

	// –î–æ–±–∞–≤–∏–º –±–æ–Ω—É—Å–Ω—É—é –º–µ—Ç–∫—É –µ—Å–ª–∏ –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–∏–ª
	suffix := ""
	if percentage > 1 {
		suffix = " üèÜ"
	}

	return fmt.Sprintf("–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å: [%s] %d%%%s", bar, percentText, suffix)
}

// formatTimeUnit —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö
func formatTimeUnit(value int, one, two, five string) string {
    if value == 0 {
        return ""
    }
    
    lastDigit := value % 10
    lastTwoDigits := value % 100
    
    // –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è 11-14
    if lastTwoDigits >= 11 && lastTwoDigits <= 14 {
        return fmt.Sprintf("%d %s", value, five)
    }
    
    switch lastDigit {
    case 1:
        return fmt.Sprintf("%d %s", value, one)
    case 2, 3, 4:
        return fmt.Sprintf("%d %s", value, two)
    default:
        return fmt.Sprintf("%d %s", value, five)
    }
}

// FormatTimesWord —Å–∫–ª–æ–Ω—è–µ—Ç —Å–ª–æ–≤–æ "—Ä–∞–∑" (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
func FormatTimesWord(n int) string {
    return formatTimeUnit(n, "—Ä–∞–∑", "—Ä–∞–∑–∞", "—Ä–∞–∑")
}

// FormatHoursCompact —Å–∫–ª–æ–Ω—è–µ—Ç —Å–ª–æ–≤–æ "—á–∞—Å"
func FormatHoursCompact(hours int) string {
    return formatTimeUnit(hours, "—á–∞—Å", "—á–∞—Å–∞", "—á–∞—Å–æ–≤")
}

// FormatDaysCompact —Å–∫–ª–æ–Ω—è–µ—Ç —Å–ª–æ–≤–æ "–¥–µ–Ω—å"  
func FormatDaysCompact(days int) string {
    return formatTimeUnit(days, "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π")
}