package service

import (
	"context"
	"fmt"
	"log"
	"time"
	"trackerbot/keyboard"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type ReminderService struct {
	pushupService *PushupService
	bot           *tgbotapi.BotAPI
}

func NewReminderService(pushupService *PushupService, bot *tgbotapi.BotAPI) *ReminderService {
	return &ReminderService{
		pushupService: pushupService,
		bot:           bot,
	}
}

func (rs *ReminderService) StartReminderChecker() {
	go rs.checkReminders()
}

func (rs *ReminderService) checkReminders() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 48 —á–∞—Å–æ–≤
	ticker := time.NewTicker(15 * time.Second)
	defer ticker.Stop()

	for range ticker.C {
		ctx := context.Background()

		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª–∏—Å—å –±–æ–ª–µ–µ 2 –¥–Ω–µ–π
		inactiveUsers, err := rs.pushupService.GetUsersForReminder(ctx)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
		for _, userID := range inactiveUsers {
			rs.sendReminder(ctx, userID)
		}
	}
}

func (rs *ReminderService) sendReminder(ctx context.Context, userID int64) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —á–∞—Ç
	if !rs.isChatAvailable(userID) {
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)", userID)
		rs.disableNotificationsForUnavailableUser(ctx, userID)
		return
	}

	// –ï–¥–∏–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    var dailyNorm, totalToday int
    var lastDailyNormDate, lastWorkoutDate time.Time
    query := `
        SELECT 
            u.daily_norm,
            u.last_updated,
            COALESCE((
                SELECT SUM(count) 
                FROM pushups 
                WHERE user_id = u.user_id AND date = CURRENT_DATE
            ), 0) as total_today,
            COALESCE((
                SELECT MAX(date) 
                FROM pushups 
                WHERE user_id = u.user_id
            ), '0001-01-01'::DATE) as last_workout_date
        FROM users u
        WHERE u.user_id = $1`

    err := rs.pushupService.repo.Pool().QueryRow(ctx, query, userID).Scan(
        &dailyNorm, 
        &lastDailyNormDate, 
        &totalToday, 
        &lastWorkoutDate,
    )
    if err != nil {
        log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
        return
    }

    remaining := dailyNorm - totalToday
    if remaining <= 0 {
        return
    }

    now := time.Now().UTC()
    hoursWithoutDailyNorm := int(now.Sub(lastDailyNormDate).Hours())
    hoursWithoutWorkout := int(now.Sub(lastWorkoutDate).Hours())

    message := rs.buildReminderMessage(remaining, dailyNorm, hoursWithoutDailyNorm, hoursWithoutWorkout, lastWorkoutDate)
    
    msg := tgbotapi.NewMessage(userID, message)
    notificationsEnabled, _ := rs.pushupService.GetNotificationsStatus(ctx, userID)
    msg.ReplyMarkup = keyboard.MainKeyboard(notificationsEnabled)

    if _, err := rs.bot.Send(msg); err != nil {
        log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userID, err)
        if rs.isChatNotFoundError(err) {
            rs.disableNotificationsForUnavailableUser(ctx, userID)
        }
    } else {
        rs.pushupService.UpdateLastNotification(ctx, userID)
        log.Printf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", userID)
    }
}

func (rs *ReminderService) buildReminderMessage(remaining, dailyNorm, hoursWithoutDailyNorm, hoursWithoutWorkout int, lastWorkoutDate time.Time) string {
    message := "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!\n\n"
    
    today := time.Now().UTC().Truncate(24 * time.Hour)
    trainedToday := !lastWorkoutDate.Before(today)
    
    if !trainedToday {
        message += "–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è! üí•\n"
    } else {
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–Ω–∏ –∏ —á–∞—Å—ã
        daysWithoutNorm := hoursWithoutDailyNorm / 24
        hoursWithoutNorm := hoursWithoutDailyNorm % 24
        
        daysWithoutWorkout := hoursWithoutWorkout / 24
        hoursRemainingWorkout := hoursWithoutWorkout % 24
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        var normPeriod, workoutPeriod string
        
        if daysWithoutNorm > 0 && hoursWithoutNorm > 0 {
            normPeriod = fmt.Sprintf("%s –∏ %s", 
                FormatDaysCompact(daysWithoutNorm), 
                FormatHoursCompact(hoursWithoutNorm))
        } else if daysWithoutNorm > 0 {
            normPeriod = FormatDaysCompact(daysWithoutNorm)
        } else if hoursWithoutNorm > 0 {
            normPeriod = FormatHoursCompact(hoursWithoutNorm)
        } else {
            normPeriod = "–º–µ–Ω–µ–µ —á–∞—Å–∞"
        }
        
        if daysWithoutWorkout > 0 && hoursRemainingWorkout > 0 {
            workoutPeriod = fmt.Sprintf("%s –∏ %s", 
                FormatDaysCompact(daysWithoutWorkout), 
                FormatHoursCompact(hoursRemainingWorkout))
        } else if daysWithoutWorkout > 0 {
            workoutPeriod = FormatDaysCompact(daysWithoutWorkout)
        } else if hoursRemainingWorkout > 0 {
            workoutPeriod = FormatHoursCompact(hoursRemainingWorkout)
        } else {
            workoutPeriod = "–º–µ–Ω–µ–µ —á–∞—Å–∞"
        }
        
        message += fmt.Sprintf("–ü—Ä–æ—à–ª–æ %s —Å –º–æ–º–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã.\n", normPeriod)
        message += fmt.Sprintf("–ò %s —Å —Ç–≤–æ–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n", workoutPeriod)
    }

    message += fmt.Sprintf("–¢–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å %d –æ—Ç–∂–∏–º–∞–Ω–∏–π –¥–æ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã (%d –≤—Å–µ–≥–æ). üí™üöÄ", 
        remaining, dailyNorm)
    message += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É \"‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è\""
    
    return message
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
func (rs *ReminderService) isChatAvailable(userID int64) bool {
	// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞
	msg := tgbotapi.NewMessage(userID, "")
	_, err := rs.bot.Send(msg)
	return err == nil || !rs.isChatNotFoundError(err)
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "chat not found"
func (rs *ReminderService) isChatNotFoundError(err error) bool {
	return err != nil && (err.Error() == "Bad Request: chat not found" ||
		err.Error() == "Bad Request: user not found" ||
		err.Error() == "Forbidden: bot was blocked by the user")
}

// –û—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (rs *ReminderService) disableNotificationsForUnavailableUser(ctx context.Context, userID int64) {
	err := rs.pushupService.DisableNotifications(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
	} else {
		log.Printf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", userID)
	}
}

