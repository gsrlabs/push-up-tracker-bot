package service

import (
	"context"
	"fmt"
	"log"
	"time"
	"trackerbot/keyboard"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type ReminderService struct {
	pushupService *PushupService
	bot           *tgbotapi.BotAPI
}

func NewReminderService(pushupService *PushupService, bot *tgbotapi.BotAPI) *ReminderService {
	return &ReminderService{
		pushupService: pushupService,
		bot:           bot,
	}
}

func (rs *ReminderService) StartReminderChecker() {
	go rs.checkReminders()
}

func (rs *ReminderService) checkReminders() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	ticker := time.NewTicker(10 * time.Second)
	defer ticker.Stop()

	for range ticker.C {
		ctx := context.Background()

		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª–∏—Å—å –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç
		inactiveUsers, err := rs.getInactiveUsers(ctx)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
		for _, userID := range inactiveUsers {
			rs.sendReminder(ctx, userID)
		}
	}
}

func (rs *ReminderService) getInactiveUsers(ctx context.Context) ([]int64, error) {
	query := `
    SELECT u.user_id
    FROM users u
    LEFT JOIN (
        SELECT user_id, COALESCE(SUM(count), 0) AS total_today
        FROM pushups
        WHERE date = CURRENT_DATE
        GROUP BY user_id
    ) p ON u.user_id = p.user_id
    WHERE u.notifications_enabled = TRUE
      AND COALESCE(p.total_today, 0) < u.daily_norm
    ORDER BY u.user_id;
    `

	rows, err := rs.pushupService.repo.Pool().Query(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var userIDs []int64
	for rows.Next() {
		var userID int64
		if err := rows.Scan(&userID); err != nil {
			return nil, err
		}
		userIDs = append(userIDs, userID)
	}

	return userIDs, nil
}

func (rs *ReminderService) sendReminder(ctx context.Context, userID int64) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —á–∞—Ç
	if !rs.isChatAvailable(userID) {
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)", userID)
		rs.disableNotificationsForUnavailableUser(ctx, userID)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—É –∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
	var dailyNorm, totalToday int
	query := `
		SELECT u.daily_norm, COALESCE(SUM(p.count), 0) AS total_today
		FROM users u
		LEFT JOIN pushups p ON u.user_id = p.user_id AND p.date = CURRENT_DATE
		WHERE u.user_id = $1
		GROUP BY u.daily_norm;
	`
	err := rs.pushupService.repo.Pool().QueryRow(ctx, query, userID).Scan(&dailyNorm, &totalToday)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
	lastWorkout, err := rs.getLastWorkoutDate(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: %v", err)
		return
	}

	remaining := dailyNorm - totalToday
	if remaining <= 0 {
		// –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª –Ω–æ—Ä–º—É, –Ω–µ —à–ª—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!\n\n"
	if lastWorkout.IsZero() {
		message += "–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è! üí•\n"
	} else {
		minutesSince := int(time.Since(lastWorkout).Minutes())
		message += fmt.Sprintf("–ü—Ä–æ—à–ª–æ —É–∂–µ %d –º–∏–Ω—É—Ç —Å —Ç–≤–æ–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n", minutesSince)
	}

	message += fmt.Sprintf("–¢–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å %d –æ—Ç–∂–∏–º–∞–Ω–∏–π –¥–æ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã (%d –≤—Å–µ–≥–æ). üí™üöÄ", remaining, dailyNorm)
	message += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É \"+ –∑–∞ –¥–µ–Ω—å\" —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è!"

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
	msg := tgbotapi.NewMessage(userID, message)

	
	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
	notificationsEnabled, err := rs.pushupService.GetNotificationsStatus(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è %d: %v", userID, err)
		// –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		notificationsEnabled = true
	}

	msg.ReplyMarkup = keyboard.MainKeyboard(notificationsEnabled)

	if _, err := rs.bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userID, err)
		if rs.isChatNotFoundError(err) {
			rs.disableNotificationsForUnavailableUser(ctx, userID)
		}
	}
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
func (rs *ReminderService) isChatAvailable(userID int64) bool {
	// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞
	msg := tgbotapi.NewMessage(userID, "")
	_, err := rs.bot.Send(msg)
	return err == nil || !rs.isChatNotFoundError(err)
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "chat not found"
func (rs *ReminderService) isChatNotFoundError(err error) bool {
	return err != nil && (err.Error() == "Bad Request: chat not found" ||
		err.Error() == "Bad Request: user not found" ||
		err.Error() == "Forbidden: bot was blocked by the user")
}

// –û—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (rs *ReminderService) disableNotificationsForUnavailableUser(ctx context.Context, userID int64) {
	err := rs.pushupService.DisableNotifications(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
	} else {
		log.Printf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", userID)
	}
}

func (rs *ReminderService) getLastWorkoutDate(ctx context.Context, userID int64) (time.Time, error) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ date –∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
	query := `SELECT COALESCE(MAX(date), '0001-01-01') FROM pushups WHERE user_id = $1`
	var lastDate time.Time
	err := rs.pushupService.repo.Pool().QueryRow(ctx, query, userID).Scan(&lastDate)
	if err != nil {
		return time.Time{}, err
	}
	return lastDate, nil
}
