package service

import (
	"context"
	"fmt"
	"log"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"trackerbot/keyboard"
)

type ProgressReminderService struct {
	pushupService *PushupService
	bot           *tgbotapi.BotAPI
}

func NewProgressReminderService(pushupService *PushupService, bot *tgbotapi.BotAPI) *ProgressReminderService {
	return &ProgressReminderService{
		pushupService: pushupService,
		bot:           bot,
	}
}

func (prs *ProgressReminderService) StartProgressChecker() {
	go prs.checkProgressReminders()
}

func (prs *ProgressReminderService) checkProgressReminders() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
	ticker := time.NewTicker(24 * time.Hour)
	defer ticker.Stop()

	// –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
	time.Sleep(1 * time.Minute)

	for range ticker.C {
		ctx := context.Background()

		usersToRemind, err := prs.getUsersForProgressReminder(ctx)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: %v", err)
			continue
		}

		log.Printf("–ù–∞–π–¥–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ", len(usersToRemind))

		for _, userData := range usersToRemind {
			prs.sendProgressReminder(ctx, userData)
		}
	}
}

type UserProgressData struct {
	UserID     int64
	Username   string
	CurrentMax int
	LastUpdate time.Time
	DaysPassed int
	NextTarget int
}

func (prs *ProgressReminderService) getUsersForProgressReminder(ctx context.Context) ([]UserProgressData, error) {
	query := `
    SELECT 
        user_id,
        username,
        max_reps,
        last_updated_max_reps,
        EXTRACT(DAYS FROM (CURRENT_DATE - last_updated_max_reps)) as days_passed
    FROM users 
    WHERE notifications_enabled = TRUE
      AND max_reps > 0
      AND max_reps < 100
      AND last_updated_max_reps <= CURRENT_DATE - INTERVAL '7 days' 
    ORDER BY last_updated_max_reps ASC`

	rows, err := prs.pushupService.repo.Pool().Query(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var users []UserProgressData
	for rows.Next() {
		var user UserProgressData
		var lastUpdate time.Time

		if err := rows.Scan(&user.UserID, &user.Username, &user.CurrentMax, &lastUpdate, &user.DaysPassed); err != nil {
			return nil, err
		}

		user.LastUpdate = lastUpdate
		user.NextTarget = user.CurrentMax + CalculateNextTarget(user.CurrentMax)

		users = append(users, user)
	}

	return users, nil
}

func (prs *ProgressReminderService) sendProgressReminder(ctx context.Context, userData UserProgressData) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	notificationsEnabled, err := prs.pushupService.GetNotificationsStatus(ctx, userData.UserID)
	if err != nil || !notificationsEnabled {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Ç–∞
	if !prs.isChatAvailable(userData.UserID) {
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ", userData.UserID)
		prs.disableNotificationsForUnavailableUser(ctx, userData.UserID)
		return
	}

	message := prs.buildProgressMessage(userData)
	msg := tgbotapi.NewMessage(userData.UserID, message)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard.MainKeyboard(notificationsEnabled)

	if _, err := prs.bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userData.UserID, err)
		if prs.isChatNotFoundError(err) {
			prs.disableNotificationsForUnavailableUser(ctx, userData.UserID)
		}
	} else {
		log.Printf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d (–ø—Ä–æ—à–ª–æ %d –¥–Ω–µ–π)",
			userData.UserID, userData.DaysPassed)
	}
}

func (prs *ProgressReminderService) buildProgressMessage(userData UserProgressData) string {
	message := "üìà **–í—Ä–µ–º—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!**\n\n"
	message += fmt.Sprintf("–ü—Ä–æ—à–ª–æ —É–∂–µ **%d –¥–Ω–µ–π** —Å —Ç–≤–æ–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –æ—Ç–∂–∏–º–∞–Ω–∏–π.\n\n", userData.DaysPassed)

	message += fmt.Sprintf("üí™ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–µ–∫–æ—Ä–¥: **%d –æ—Ç–∂–∏–º–∞–Ω–∏–π** –∑–∞ –ø–æ–¥—Ö–æ–¥\n", userData.CurrentMax)
	message += fmt.Sprintf("üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–ª—å –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é: **%d –æ—Ç–∂–∏–º–∞–Ω–∏–π**\n\n", userData.NextTarget)

	message += fmt.Sprintf("üìä –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: **%s**\n", GetUserRank(userData.CurrentMax))

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
	repsToNextRank := GetRepsToNextRank(userData.CurrentMax)
	if repsToNextRank > 0 {
		message += fmt.Sprintf("üåü –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: **+%d –æ—Ç–∂–∏–º–∞–Ω–∏–π**\n\n", repsToNextRank)
	}

	// –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	if userData.DaysPassed > 14 {
		message += "üöÄ –ù–µ —Ç–µ—Ä—è–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ —Å–∏–ª—ã –∏ –æ–±–Ω–æ–≤–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n"
	} else if userData.DaysPassed > 30 {
		message += "üí• –î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å! –ü–æ—Ä–∞ —É–∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã —Å—Ç–∞–ª —Å–∏–ª—å–Ω–µ–µ!\n"
	} else {
		message += "üî• –ü–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—ã —Å–¥–µ–ª–∞–ª –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é!\n"
	}

	message += "\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É \"üéØ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\" —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"

	return message
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
func (prs *ProgressReminderService) isChatAvailable(userID int64) bool {
	msg := tgbotapi.NewMessage(userID, "")
	_, err := prs.bot.Send(msg)
	return err == nil
}

func (prs *ProgressReminderService) isChatNotFoundError(err error) bool {
	return err != nil && (err.Error() == "Bad Request: chat not found" ||
		err.Error() == "Bad Request: user not found" ||
		err.Error() == "Forbidden: bot was blocked by the user")
}

func (prs *ProgressReminderService) disableNotificationsForUnavailableUser(ctx context.Context, userID int64) {
	err := prs.pushupService.DisableNotifications(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
	} else {
		log.Printf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", userID)
	}
}
