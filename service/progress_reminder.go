package service

import (
    "context"
    "fmt"
    "log"
    "time"

    tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
    "trackerbot/keyboard"
)

type ProgressReminderService struct {
    pushupService *PushupService
    bot           *tgbotapi.BotAPI
}

func NewProgressReminderService(pushupService *PushupService, bot *tgbotapi.BotAPI) *ProgressReminderService {
    return &ProgressReminderService{
        pushupService: pushupService,
        bot:           bot,
    }
}

func (prs *ProgressReminderService) StartProgressChecker() {
    go prs.checkProgressReminders()
}

func (prs *ProgressReminderService) checkProgressReminders() {
    
    ticker := time.NewTicker(24 * time.Hour)
    defer ticker.Stop()

    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    time.Sleep(10 * time.Second)
    prs.forceCheck()
    
    for range ticker.C {
        prs.forceCheck()
    }
}


func (prs *ProgressReminderService) forceCheck() {
    ctx := context.Background()
    
    usersToRemind, err := prs.getUsersForProgressReminder(ctx, 7)
    if err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
        return
    }

    if len(usersToRemind) > 0 {
        log.Printf("–ù–∞–π–¥–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", len(usersToRemind))
        
        for _, userData := range usersToRemind {
            log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (ID: %d, max_reps: %d, –¥–Ω–µ–π: %d)", 
                userData.Username, userData.UserID, userData.CurrentMax, userData.DaysPassed)
            prs.sendProgressReminder(ctx, userData)
        }
    } else {
        log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    }
}

func (prs *ProgressReminderService) getUsersForProgressReminder(ctx context.Context, daysInterval int) ([]UserProgressData, error) {
    query := `
    SELECT 
        user_id,
        username,
        max_reps,
        last_updated_max_reps,
        EXTRACT(DAYS FROM (CURRENT_DATE - last_updated_max_reps)) as days_passed
    FROM users 
    WHERE notifications_enabled = TRUE
      AND max_reps > 0
      AND max_reps < 100
      AND last_updated_max_reps <= CURRENT_DATE - INTERVAL '1 day' * $1
    ORDER BY last_updated_max_reps ASC`

    log.Printf("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º %d –¥–Ω–µ–π", daysInterval)
    
    rows, err := prs.pushupService.repo.Pool().Query(ctx, query, daysInterval)
    if err != nil {
        return nil, err
    }
    defer rows.Close()

    var users []UserProgressData
    for rows.Next() {
        var user UserProgressData
        var lastUpdate time.Time
        
        if err := rows.Scan(&user.UserID, &user.Username, &user.CurrentMax, &lastUpdate, &user.DaysPassed); err != nil {
            return nil, err
        }
        
        user.LastUpdate = lastUpdate
        user.NextTarget = user.CurrentMax + CalculateNextTarget(user.CurrentMax)
        
        users = append(users, user)
        
        log.Printf("–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - %s: max_reps=%d, last_update=%s", 
            user.Username, user.CurrentMax, lastUpdate.Format("2006-01-02"))
    }

    return users, nil
}

// –î–û–ë–ê–í–õ–Ø–ï–ú –¢–ï–°–¢–û–í–´–ô –ú–ï–¢–û–î –î–õ–Ø –†–£–ß–ù–û–ì–û –ó–ê–ü–£–°–ö–ê
func (prs *ProgressReminderService) TestReminderForUser(ctx context.Context, userID int64) {
    log.Printf("–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", userID)
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    updateQuery := `UPDATE users SET last_updated_max_reps = CURRENT_DATE - INTERVAL '8 days' WHERE user_id = $1`
    _, err := prs.pushupService.repo.Pool().Exec(ctx, updateQuery, userID)
    if err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã: %v", err)
        return
    }
    
    log.Printf("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", userID)
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    time.Sleep(2 * time.Second)
    prs.forceCheck()
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
type UserProgressData struct {
    UserID      int64
    Username    string
    CurrentMax  int
    LastUpdate  time.Time
    DaysPassed  int
    NextTarget  int
}

func (prs *ProgressReminderService) sendProgressReminder(ctx context.Context, userData UserProgressData) {
    notificationsEnabled, err := prs.pushupService.GetNotificationsStatus(ctx, userData.UserID)
    if err != nil || !notificationsEnabled {
        log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", userData.UserID)
        return
    }

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —á–∞—Ç
	if !prs.isChatAvailable(userData.UserID) {
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)", userData.UserID)
		prs.disableNotificationsForUnavailableUser(ctx, userData.UserID)
		return
	}

    message := prs.buildProgressMessage(userData)
    msg := tgbotapi.NewMessage(userData.UserID, message)
    msg.ParseMode = "Markdown"
    msg.ReplyMarkup = keyboard.MainKeyboard(notificationsEnabled)

    if _, err := prs.bot.Send(msg); err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
    } else {
        log.Printf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", userData.UserID)
    }
}

func (prs *ProgressReminderService) buildProgressMessage(userData UserProgressData) string {
	message := "üìà **–í—Ä–µ–º—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!**\n\n"
	message += fmt.Sprintf("–ü—Ä–æ—à–ª–æ —É–∂–µ **%d –¥–Ω–µ–π** —Å —Ç–≤–æ–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –æ—Ç–∂–∏–º–∞–Ω–∏–π.\n\n", userData.DaysPassed)

	message += fmt.Sprintf("üí™ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–µ–∫–æ—Ä–¥: **%d –æ—Ç–∂–∏–º–∞–Ω–∏–π** –∑–∞ –ø–æ–¥—Ö–æ–¥\n", userData.CurrentMax)
	message += fmt.Sprintf("üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–ª—å –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é: **%d –æ—Ç–∂–∏–º–∞–Ω–∏–π**\n\n", userData.NextTarget)

	message += fmt.Sprintf("üìä –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: **%s**\n", GetUserRank(userData.CurrentMax))

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
	repsToNextRank := GetRepsToNextRank(userData.CurrentMax)
	if repsToNextRank > 0 {
		message += fmt.Sprintf("üåü –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: **+%d –æ—Ç–∂–∏–º–∞–Ω–∏–π**\n\n", repsToNextRank)
	}

	// –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	if userData.DaysPassed > 14 {
		message += "üöÄ –ù–µ —Ç–µ—Ä—è–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ —Å–∏–ª—ã –∏ –æ–±–Ω–æ–≤–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n"
	} else if userData.DaysPassed > 30 {
		message += "üí• –î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å! –ü–æ—Ä–∞ —É–∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã —Å—Ç–∞–ª —Å–∏–ª—å–Ω–µ–µ!\n"
	} else {
		message += "üî• –ü–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—ã —Å–¥–µ–ª–∞–ª –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é!\n"
	}
    message += "\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É \"üéØ –¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –æ—Ç–∂–∏–º–∞–Ω–∏–π\" —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"

    return message
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
func (prs *ProgressReminderService) isChatAvailable(userID int64) bool {
	// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞
	msg := tgbotapi.NewMessage(userID, "")
	_, err := prs.bot.Send(msg)
	return err == nil || !prs.isChatNotFoundError(err)
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "chat not found"
func (prs *ProgressReminderService) isChatNotFoundError(err error) bool {
	return err != nil && (err.Error() == "Bad Request: chat not found" ||
		err.Error() == "Bad Request: user not found" ||
		err.Error() == "Forbidden: bot was blocked by the user")
}

// –û—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (prs *ProgressReminderService) disableNotificationsForUnavailableUser(ctx context.Context, userID int64) {
	err := prs.pushupService.DisableNotifications(ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
	} else {
		log.Printf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", userID)
	}
}
