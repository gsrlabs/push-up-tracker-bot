package cache

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"sync"
	"time"
)

type TodayCache struct {
	Mu      sync.RWMutex
	Items   map[int64]int
	changed bool

	filename string
	saveMu   sync.Mutex
}

const filename = "today_cache.json"

// NewTodayCache —Å–æ–∑–¥–∞–µ—Ç –∫—ç—à –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
func NewTodayCache() *TodayCache {
	c := &TodayCache{
		Items:    make(map[int64]int),
		filename: filename,
	}
	if err := c.Load(); err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à (%s): %v", filename, err)
	}
	go c.autoSaveLoop()
	return c
}

// Add –¥–æ–±–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (c *TodayCache) Add(userID int64, count int) int {
	c.Mu.Lock()
	defer c.Mu.Unlock()

	current := c.Items[userID]
	newTotal := current + count
	c.Items[userID] = newTotal
	c.changed = true
	return newTotal
}

// Get –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
func (c *TodayCache) Get(userID int64) int {
	c.Mu.RLock()
	defer c.Mu.RUnlock()
	return c.Items[userID]
}

// Set —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func (c *TodayCache) Set(userID int64, total int) {
	c.Mu.Lock()
	defer c.Mu.Unlock()
	c.Items[userID] = total
	c.changed = true
}

// ResetDaily —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—ç—à –≤ –ø–æ–ª–Ω–æ—á—å
func (c *TodayCache) ResetDaily() {
	for {
		now := time.Now()
		nextMidnight := now.Add(24 * time.Hour).Truncate(24 * time.Hour)
		time.Sleep(time.Until(nextMidnight))

		c.Mu.Lock()
		c.Items = make(map[int64]int)
		c.changed = true
		c.Mu.Unlock()

		_ = c.Save() // —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π –∫—ç—à
		log.Printf("Cache reset at %v", time.Now())
	}
}

// Save —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
func (c *TodayCache) Save() error {
	c.saveMu.Lock()
	defer c.saveMu.Unlock()

	c.Mu.RLock()
	data, err := json.MarshalIndent(c.Items, "", "  ")
	c.Mu.RUnlock()
	if err != nil {
		return err
	}

	return os.WriteFile(c.filename, data, 0644)
}

// Load –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
func (c *TodayCache) Load() error {
	data, err := os.ReadFile(c.filename)
	if err != nil {
		if os.IsNotExist(err) {
			return nil // —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–æ–π –∫—ç—à
		}
		return err
	}

	var items map[int64]int
	if err := json.Unmarshal(data, &items); err != nil {
		return err
	}

	c.Mu.Lock()
	c.Items = items
	c.Mu.Unlock()

	return nil
}

// autoSaveLoop –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
func (c *TodayCache) autoSaveLoop() {
	ticker := time.NewTicker(5 * time.Second) // –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä–∫–∞
	defer ticker.Stop()

	for range ticker.C {
		c.Mu.Lock()
		changed := c.changed
		c.changed = false
		c.Mu.Unlock()

		if changed {
			if err := c.Save(); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: %v", err)
			}
		}
	}
}


//
// üîπ –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
//

// Size –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫—ç—à–µ
func (c *TodayCache) Size() int {
	c.Mu.RLock()
	defer c.Mu.RUnlock()
	return len(c.Items)
}

// Dump –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫—ç—à–∞
func (c *TodayCache) Dump() string {
	c.Mu.RLock()
	defer c.Mu.RUnlock()

	if len(c.Items) == 0 {
		return "–ö—ç—à –ø—É—Å—Ç üö´"
	}

	out := "üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫—ç—à–∞:\n"
	for userID, count := range c.Items {
		out += fmt.Sprintf("üë§ User %d ‚Üí %d –æ—Ç–∂–∏–º–∞–Ω–∏–π\n", userID, count)
	}
	return out
}